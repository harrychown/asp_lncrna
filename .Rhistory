gtf_file <- paste(c(inputdir, "/lncRNA_v11.4_merged.gtf"), sep="", collapse="")
### PERFORM DESEQ ON FE-STARVATION DATA ###
fe_split_file <- grep("fe_", all_split_files)
fe_split_file <- paste(c(inputdir, "/split_files/", all_split_files[fe_split_file]), sep="", collapse="")
fe_data <- read.csv(fe_split_file, header=T)
fe_data <- getdeseq(fe_data, count_dir)
View(fe_data)
all_deseq <- list()
### PERFORM DESEQ ON ALL DATA ###
data_prefixes <- c()
all_deseq <- list()
for(split_file in all_split_files){
prefix <- str_split(split_file, "_")[[1]][1]
split_file_path <- paste(c(inputdir, "/split_files/", split_file, sep="", collapse=""))
count_data <- read.csv(split_file_path, header=T)
deseq_data <- getdeseq(count_data, count_dir)
all_deseq$prefix <- deseq_data
}
data_prefixes <- c()
all_deseq <- list()
for(split_file in all_split_files){
prefix <- str_split(split_file, "_")[[1]][1]
split_file_path <- paste(c(inputdir, "/split_files/", split_file, sep="", collapse=""))
count_data <- read.csv(split_file_path, header=T)
print("DATASEQ")
deseq_data <- getdeseq(count_data, count_dir)
all_deseq$prefix <- deseq_data
}
### PERFORM DESEQ ON ALL DATA ###
data_prefixes <- c()
all_deseq <- list()
for(split_file in all_split_files){
prefix <- str_split(split_file, "_")[[1]][1]
split_file_path <- paste(c(inputdir, "/split_files/", split_file, sep="", collapse=""))
print(split_file_path)
count_data <- read.csv(split_file_path, header=T)
deseq_data <- getdeseq(count_data, count_dir)
all_deseq$prefix <- deseq_data
}
### PERFORM DESEQ ON ALL DATA ###
data_prefixes <- c()
all_deseq <- list()
for(split_file in all_split_files){
prefix <- str_split(split_file, "_")[[1]][1]
split_file_path <- paste(c(inputdir, "/split_files/", split_file), sep="", collapse="")
print(split_file_path)
count_data <- read.csv(split_file_path, header=T)
deseq_data <- getdeseq(count_data, count_dir)
all_deseq$prefix <- deseq_data
}
View(all_deseq)
### PERFORM DESEQ ON ALL DATA ###
data_prefixes <- c()
all_deseq <- list()
counter <- 1
for(split_file in all_split_files){
prefix <- str_split(split_file, "_")[[1]][1]
split_file_path <- paste(c(inputdir, "/split_files/", split_file), sep="", collapse="")
print(split_file_path)
count_data <- read.csv(split_file_path, header=T)
deseq_data <- getdeseq(count_data, count_dir)
all_deseq[[counter]] <- deseq_data
counter <- counter + 1
}
View(all_deseq)
names(all_deseq)
data_prefixes <- c()
all_deseq <- list()
counter <- 1
for(split_file in all_split_files){
prefix <- str_split(split_file, "_")[[1]][1]
split_file_path <- paste(c(inputdir, "/split_files/", split_file), sep="", collapse="")
print(split_file_path)
count_data <- read.csv(split_file_path, header=T)
deseq_data <- getdeseq(count_data, count_dir)
all_deseq[[counter]] <- deseq_data
names(all_deseq)[1] <- prefix
counter <- counter + 1
}
View(all_deseq)
data_prefixes <- c()
all_deseq <- list()
counter <- 1
for(split_file in all_split_files){
prefix <- str_split(split_file, "_")[[1]][1]
split_file_path <- paste(c(inputdir, "/split_files/", split_file), sep="", collapse="")
print(split_file_path)
count_data <- read.csv(split_file_path, header=T)
deseq_data <- getdeseq(count_data, count_dir)
all_deseq[[counter]] <- deseq_data
names(all_deseq)[counter] <- prefix
counter <- counter + 1
}
View(all_deseq)
saveRDS(all_deseq, file = "lncnrna_deseq.rds")
if(file.exists("lncrna_deseq.rds")){
print("WOOHOO")
}
file.exists("lncrna_deseq.rds")
saveRDS(all_deseq, file = "lncnrna_deseq.rds")
file.exists("lncrna_deseq.rds")
if(file.exists("lncnrna_deseq.rds")){
print("WOOHOO")
}
all_deseq2 <- readRDS("lncnrna_deseq.rds")
if(file.exists("lncnrna_deseq.rds")){
all_deseq <- readRDS("lncnrna_deseq.rds")
} else{
data_prefixes <- c()
all_deseq <- list()
counter <- 1
for(split_file in all_split_files){
prefix <- str_split(split_file, "_")[[1]][1]
split_file_path <- paste(c(inputdir, "/split_files/", split_file), sep="", collapse="")
print(split_file_path)
count_data <- read.csv(split_file_path, header=T)
deseq_data <- getdeseq(count_data, count_dir)
all_deseq[[counter]] <- deseq_data
names(all_deseq)[counter] <- prefix
counter <- counter + 1
}
saveRDS(all_deseq, file = "lncnrna_deseq.rds")
}
View(all_deseq)
itra_data <- all_deseq$itra
out2<- pheatmap(itra_lfc, show_rownames=F, cluster_cols=F, cluster_rows=T,
scale="row", cex=1, clustering_distance_rows="euclidean",
cex=1, clustering_distance_cols="euclidean",
clustering_method="complete", border_color=FALSE)
View(itra_data)
itra_data <- all_deseq$itra
itra_lfc <- itra_data$lfc
View(itra_lfc)
# Master script for lncRNA analysis
# Load external scripts
library(tidyverse)
library(data.table)
library(hash)
library(pals)
library(pheatmap)
library(gplots)
library(RColorBrewer)
library(tibble)
library("biomaRt")
library("DESeq2")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#source("cluster_deseq.R")
source("get_neighbours.R")
source("analyse_neighbours.R")
### DESEQ2 FOR CONDITIONAL DATA ###
getdeseq <- function(indata, countsdir){
# Build input for DESeq
sampleTable<-data.frame(sampleName=indata$file, fileName=indata$file, condition=factor(indata$condition))
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable=sampleTable, directory=countsdir, design=~condition)
ddsHTSeq$condition <- factor(ddsHTSeq$condition, levels=unique(ddsHTSeq$condition))
all_conditions <- levels(ddsHTSeq$condition)
# Perform DESeq
dds <- DESeq(ddsHTSeq)
# Number of transcripts
num_transcripts <- length(dds@rowRanges)
# Generate an empty results table for LFC, p-value and baseMean
lfc_matrix <- matrix(data=NA, nrow=num_transcripts, ncol=length(all_conditions) - 1)
pval_matrix <- matrix(data=NA, nrow=num_transcripts, ncol=length(all_conditions) - 1)
basemean_matrix <- matrix(data=NA, nrow=num_transcripts, ncol=length(all_conditions) - 1)
sqrd_lfc_matrix <- matrix(data=NA, nrow=num_transcripts, ncol=length(all_conditions) - 1)
colnames(lfc_matrix) <- colnames(pval_matrix) <- colnames(basemean_matrix) <-  colnames(sqrd_lfc_matrix) <- all_conditions[2:length(all_conditions)]
# Perform DESeq
dds <- DESeq(ddsHTSeq)
# Extract results from each condition
for(i in 2:length(all_conditions)){
res <- results(dds, c("condition", all_conditions[i], all_conditions[1]))
res_df <- as.data.frame(res)
# Store results in previously generated matrices
lfc_matrix[,i-1] <- res_df$log2FoldChange
pval_matrix[,i-1] <- res_df$padj
basemean_matrix[,i-1] <- res_df$baseMean
sqrd_lfc_matrix[,i-1] <- res_df$log2FoldChange ** 2
}
# Generate overview dataframe for filtering
# Min Pval, Max basemean, Max sqrdLFC
min_pval <- apply(pval_matrix, 1, min)
max_basemean <- apply(basemean_matrix, 1, max)
max_sqrd_lfc <- apply(sqrd_lfc_matrix, 1, max)
# Build dataframe
best_dataframe <- data.frame(pval=min_pval, basemean=max_basemean, sqrdlfc=max_sqrd_lfc)
# Store results in a list
output <- list("lfc"=lfc_matrix, "pval"=pval_matrix, "basemean"=basemean_matrix, "sqrdlfc"=sqrd_lfc_matrix)
# Filter
keep_index <- which((best_dataframe$basemean>30&best_dataframe$pval<0.05&best_dataframe$sqrdlfc>1)|best_dataframe$basemean>5000)
keep_index <- keep_index[! keep_index %in% which(is.na(best_dataframe))]
keep_rownames <- rownames(dds@rowRanges)[keep_index]
for(i in 1:length(output)){
dm <- output[[i]]
print(nrow(dm))
print(max(keep_index))
filtered_dm <- dm[keep_index, ]
rownames(filtered_dm) <- keep_rownames
output[[i]] <- filtered_dm
}
return(output)
}
### SETUP INPUT/OUTPUT ###
configuration_file <- readLines("analysis.config")
inputdir <- configuration_file[1]
outputdir <- configuration_file[2]
# Save split and count files/folders
split_dir <- paste(c(inputdir, "/split_files"), sep="", collapse="")
all_split_files <- list.files(path=split_dir)
count_dir <- paste(c(inputdir, "/counts"), sep="", collapse="")
gtf_file <- paste(c(inputdir, "/lncRNA_v11.4_merged.gtf"), sep="", collapse="")
### EXTRACT LNCRNA GROUPS FROM GTF ###
# Extract transcript lines
gtf <- readLines(gtf_file)
raw_transcripts <- grep('\ttranscript\t', gtf)
raw_transcripts <- gtf[raw_transcripts]
data_prefixes <- c()
all_deseq <- list()
counter <- 1
for(split_file in all_split_files){
prefix <- str_split(split_file, "_")[[1]][1]
split_file_path <- paste(c(inputdir, "/split_files/", split_file), sep="", collapse="")
print(split_file_path)
count_data <- read.csv(split_file_path, header=T)
deseq_data <- getdeseq(count_data, count_dir)
all_deseq[[counter]] <- deseq_data
names(all_deseq)[counter] <- prefix
counter <- counter + 1
}
saveRDS(all_deseq, file = "lncnrna_deseq.rds")
View(all_deseq)
itra_data <- all_deseq$itra
itra_lfc <- itra_data$lfc
View(itra_lfc)
View(itra_data)
# Master script for lncRNA analysis
# Load external scripts
library(tidyverse)
library(data.table)
library(hash)
library(pals)
library(pheatmap)
library(gplots)
library(RColorBrewer)
library(tibble)
library("biomaRt")
library("DESeq2")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#source("cluster_deseq.R")
source("get_neighbours.R")
source("analyse_neighbours.R")
### DESEQ2 FOR CONDITIONAL DATA ###
getdeseq <- function(indata, countsdir){
# Build input for DESeq
sampleTable<-data.frame(sampleName=indata$file, fileName=indata$file, condition=factor(indata$condition))
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable=sampleTable, directory=countsdir, design=~condition)
ddsHTSeq$condition <- factor(ddsHTSeq$condition, levels=unique(ddsHTSeq$condition))
all_conditions <- levels(ddsHTSeq$condition)
# Perform DESeq
dds <- DESeq(ddsHTSeq)
# Number of transcripts
num_transcripts <- length(dds@rowRanges)
# Generate an empty results table for LFC, p-value and baseMean
lfc_matrix <- matrix(data=NA, nrow=num_transcripts, ncol=length(all_conditions) - 1)
pval_matrix <- matrix(data=NA, nrow=num_transcripts, ncol=length(all_conditions) - 1)
basemean_matrix <- matrix(data=NA, nrow=num_transcripts, ncol=length(all_conditions) - 1)
sqrd_lfc_matrix <- matrix(data=NA, nrow=num_transcripts, ncol=length(all_conditions) - 1)
colnames(lfc_matrix) <- colnames(pval_matrix) <- colnames(basemean_matrix) <-  colnames(sqrd_lfc_matrix) <- all_conditions[2:length(all_conditions)]
# Perform DESeq
dds <- DESeq(ddsHTSeq)
# Extract results from each condition
for(i in 2:length(all_conditions)){
res <- results(dds, c("condition", all_conditions[i], all_conditions[1]))
res_df <- as.data.frame(res)
# Store results in previously generated matrices
lfc_matrix[,i-1] <- res_df$log2FoldChange
pval_matrix[,i-1] <- res_df$padj
basemean_matrix[,i-1] <- res_df$baseMean
sqrd_lfc_matrix[,i-1] <- res_df$log2FoldChange ** 2
}
# Generate overview dataframe for filtering
# Min Pval, Max basemean, Max sqrdLFC
min_pval <- apply(pval_matrix, 1, min)
max_basemean <- apply(basemean_matrix, 1, max)
max_sqrd_lfc <- apply(sqrd_lfc_matrix, 1, max)
# Build dataframe
best_dataframe <- data.frame(pval=min_pval, basemean=max_basemean, sqrdlfc=max_sqrd_lfc)
# Store results in a list
output <- list("lfc"=lfc_matrix, "pval"=pval_matrix, "basemean"=basemean_matrix, "sqrdlfc"=sqrd_lfc_matrix)
# Filter
keep_index <- which((best_dataframe$basemean>30&best_dataframe$pval<0.05&best_dataframe$sqrdlfc>1)|best_dataframe$basemean>5000)
keep_index <- keep_index[! keep_index %in% which(is.na(best_dataframe))]
keep_rownames <- rownames(dds@rowRanges)[keep_index]
print(keep_rownames)
quit()
for(i in 1:length(output)){
dm <- output[[i]]
print(nrow(dm))
print(max(keep_index))
filtered_dm <- dm[keep_index, ]
rownames(filtered_dm) <- keep_rownames
output[[i]] <- filtered_dm
}
return(output)
}
data_prefixes <- c()
all_deseq <- list()
counter <- 1
for(split_file in all_split_files){
prefix <- str_split(split_file, "_")[[1]][1]
split_file_path <- paste(c(inputdir, "/split_files/", split_file), sep="", collapse="")
print(split_file_path)
count_data <- read.csv(split_file_path, header=T)
deseq_data <- getdeseq(count_data, count_dir)
all_deseq[[counter]] <- deseq_data
names(all_deseq)[counter] <- prefix
counter <- counter + 1
}
# Master script for lncRNA analysis
# Load external scripts
library(tidyverse)
library(data.table)
library(hash)
library(pals)
library(pheatmap)
library(gplots)
library(RColorBrewer)
library(tibble)
library("biomaRt")
library("DESeq2")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#source("cluster_deseq.R")
source("get_neighbours.R")
source("analyse_neighbours.R")
### DESEQ2 FOR CONDITIONAL DATA ###
getdeseq <- function(indata, countsdir){
# Build input for DESeq
sampleTable<-data.frame(sampleName=indata$file, fileName=indata$file, condition=factor(indata$condition))
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable=sampleTable, directory=countsdir, design=~condition)
ddsHTSeq$condition <- factor(ddsHTSeq$condition, levels=unique(ddsHTSeq$condition))
all_conditions <- levels(ddsHTSeq$condition)
# Perform DESeq
dds <- DESeq(ddsHTSeq)
# Number of transcripts
num_transcripts <- length(dds@rowRanges)
# Generate an empty results table for LFC, p-value and baseMean
lfc_matrix <- as.data.frame(matrix(data=NA, nrow=num_transcripts, ncol=length(all_conditions) - 1))
pval_matrix <- as.data.frame(matrix(data=NA, nrow=num_transcripts, ncol=length(all_conditions) - 1))
basemean_matrix <- as.data.frame(matrix(data=NA, nrow=num_transcripts, ncol=length(all_conditions) - 1))
sqrd_lfc_matrix <- as.data.frame(matrix(data=NA, nrow=num_transcripts, ncol=length(all_conditions) - 1))
colnames(lfc_matrix) <- colnames(pval_matrix) <- colnames(basemean_matrix) <-  colnames(sqrd_lfc_matrix) <- all_conditions[2:length(all_conditions)]
# Perform DESeq
dds <- DESeq(ddsHTSeq)
# Extract results from each condition
for(i in 2:length(all_conditions)){
res <- results(dds, c("condition", all_conditions[i], all_conditions[1]))
res_df <- as.data.frame(res)
rownames(lfc_matrix) <- rownames(pval_matrix) <- rownames(basemean_matrix) <-  rownames(sqrd_lfc_matrix) <- rownames(res_df)
# Store results in previously generated matrices
lfc_matrix[,i-1] <- res_df$log2FoldChange
pval_matrix[,i-1] <- res_df$padj
basemean_matrix[,i-1] <- res_df$baseMean
sqrd_lfc_matrix[,i-1] <- res_df$log2FoldChange ** 2
}
# Generate overview dataframe for filtering
# Min Pval, Max basemean, Max sqrdLFC
min_pval <- apply(pval_matrix, 1, min)
max_basemean <- apply(basemean_matrix, 1, max)
max_sqrd_lfc <- apply(sqrd_lfc_matrix, 1, max)
# Build dataframe
best_dataframe <- data.frame(pval=min_pval, basemean=max_basemean, sqrdlfc=max_sqrd_lfc)
# Store results in a list
output <- list("lfc"=lfc_matrix, "pval"=pval_matrix, "basemean"=basemean_matrix, "sqrdlfc"=sqrd_lfc_matrix)
# Filter
keep_index <- which((best_dataframe$basemean>30&best_dataframe$pval<0.05&best_dataframe$sqrdlfc>1)|best_dataframe$basemean>5000)
keep_index <- keep_index[! keep_index %in% which(is.na(best_dataframe))]
for(i in 1:length(output)){
dm <- output[[i]]
print(nrow(dm))
print(max(keep_index))
filtered_dm <- dm[keep_index, ]
print(rownames(filtered_dm))
quit()
rownames(filtered_dm) <- keep_rownames
output[[i]] <- filtered_dm
}
return(output)
}
### SETUP INPUT/OUTPUT ###
configuration_file <- readLines("analysis.config")
inputdir <- configuration_file[1]
outputdir <- configuration_file[2]
# Save split and count files/folders
split_dir <- paste(c(inputdir, "/split_files"), sep="", collapse="")
all_split_files <- list.files(path=split_dir)
count_dir <- paste(c(inputdir, "/counts"), sep="", collapse="")
gtf_file <- paste(c(inputdir, "/lncRNA_v11.4_merged.gtf"), sep="", collapse="")
### EXTRACT LNCRNA GROUPS FROM GTF ###
# Extract transcript lines
gtf <- readLines(gtf_file)
raw_transcripts <- grep('\ttranscript\t', gtf)
raw_transcripts <- gtf[raw_transcripts]
data_prefixes <- c()
all_deseq <- list()
counter <- 1
for(split_file in all_split_files){
prefix <- str_split(split_file, "_")[[1]][1]
split_file_path <- paste(c(inputdir, "/split_files/", split_file), sep="", collapse="")
print(split_file_path)
count_data <- read.csv(split_file_path, header=T)
deseq_data <- getdeseq(count_data, count_dir)
all_deseq[[counter]] <- deseq_data
names(all_deseq)[counter] <- prefix
counter <- counter + 1
}
View(all_deseq)
data_prefixes <- c()
all_deseq <- list()
counter <- 1
for(split_file in all_split_files){
prefix <- str_split(split_file, "_")[[1]][1]
split_file_path <- paste(c(inputdir, "/split_files/", split_file), sep="", collapse="")
print(split_file_path)
count_data <- read.csv(split_file_path, header=T)
deseq_data <- getdeseq(count_data, count_dir)
all_deseq[[counter]] <- deseq_data
names(all_deseq)[counter] <- prefix
counter <- counter + 1
}
saveRDS(all_deseq, file = "lncnrna_deseq.rds")
# Master script for lncRNA analysis
# Load external scripts
library(tidyverse)
library(data.table)
library(hash)
library(pals)
library(pheatmap)
library(gplots)
library(RColorBrewer)
library(tibble)
library("biomaRt")
library("DESeq2")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#source("cluster_deseq.R")
source("get_neighbours.R")
source("analyse_neighbours.R")
### DESEQ2 FOR CONDITIONAL DATA ###
getdeseq <- function(indata, countsdir){
# Build input for DESeq
sampleTable<-data.frame(sampleName=indata$file, fileName=indata$file, condition=factor(indata$condition))
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable=sampleTable, directory=countsdir, design=~condition)
ddsHTSeq$condition <- factor(ddsHTSeq$condition, levels=unique(ddsHTSeq$condition))
all_conditions <- levels(ddsHTSeq$condition)
# Perform DESeq
dds <- DESeq(ddsHTSeq)
# Number of transcripts
num_transcripts <- length(dds@rowRanges)
# Generate an empty results table for LFC, p-value and baseMean
lfc_matrix <- as.data.frame(matrix(data=NA, nrow=num_transcripts, ncol=length(all_conditions) - 1))
pval_matrix <- as.data.frame(matrix(data=NA, nrow=num_transcripts, ncol=length(all_conditions) - 1))
basemean_matrix <- as.data.frame(matrix(data=NA, nrow=num_transcripts, ncol=length(all_conditions) - 1))
sqrd_lfc_matrix <- as.data.frame(matrix(data=NA, nrow=num_transcripts, ncol=length(all_conditions) - 1))
colnames(lfc_matrix) <- colnames(pval_matrix) <- colnames(basemean_matrix) <-  colnames(sqrd_lfc_matrix) <- all_conditions[2:length(all_conditions)]
# Perform DESeq
dds <- DESeq(ddsHTSeq)
# Extract results from each condition
for(i in 2:length(all_conditions)){
res <- results(dds, c("condition", all_conditions[i], all_conditions[1]))
res_df <- as.data.frame(res)
rownames(lfc_matrix) <- rownames(pval_matrix) <- rownames(basemean_matrix) <-  rownames(sqrd_lfc_matrix) <- rownames(res_df)
# Store results in previously generated matrices
lfc_matrix[,i-1] <- res_df$log2FoldChange
pval_matrix[,i-1] <- res_df$padj
basemean_matrix[,i-1] <- res_df$baseMean
sqrd_lfc_matrix[,i-1] <- res_df$log2FoldChange ** 2
}
# Generate overview dataframe for filtering
# Min Pval, Max basemean, Max sqrdLFC
min_pval <- apply(pval_matrix, 1, min)
max_basemean <- apply(basemean_matrix, 1, max)
max_sqrd_lfc <- apply(sqrd_lfc_matrix, 1, max)
# Build dataframe
best_dataframe <- data.frame(pval=min_pval, basemean=max_basemean, sqrdlfc=max_sqrd_lfc)
# Store results in a list
output <- list("lfc"=lfc_matrix, "pval"=pval_matrix, "basemean"=basemean_matrix, "sqrdlfc"=sqrd_lfc_matrix)
# Filter
keep_index <- which((best_dataframe$basemean>30&best_dataframe$pval<0.05&best_dataframe$sqrdlfc>1)|best_dataframe$basemean>5000)
keep_index <- keep_index[! keep_index %in% which(is.na(best_dataframe))]
for(i in 1:length(output)){
dm <- output[[i]]
print(nrow(dm))
print(max(keep_index))
filtered_dm <- dm[keep_index, ]
print(rownames(filtered_dm))
quit()
rownames(filtered_dm) <- keep_rownames
output[[i]] <- filtered_dm
}
return(output)
}
data_prefixes <- c()
all_deseq <- list()
counter <- 1
for(split_file in all_split_files){
prefix <- str_split(split_file, "_")[[1]][1]
split_file_path <- paste(c(inputdir, "/split_files/", split_file), sep="", collapse="")
print(split_file_path)
count_data <- read.csv(split_file_path, header=T)
deseq_data <- getdeseq(count_data, count_dir)
all_deseq[[counter]] <- deseq_data
names(all_deseq)[counter] <- prefix
counter <- counter + 1
}
